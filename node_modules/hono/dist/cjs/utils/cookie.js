"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var cookie_exports = {};
__export(cookie_exports, {
  parse: () => parse,
  parseSigned: () => parseSigned,
  serialize: () => serialize,
  serializeSigned: () => serializeSigned
});
module.exports = __toCommonJS(cookie_exports);
var import_url = require("./url");
const makeSignature = async (value, secret) => {
  const algorithm = { name: "HMAC", hash: "SHA-256" };
  const encoder = new TextEncoder();
  const key = await crypto.subtle.importKey("raw", encoder.encode(secret), algorithm, false, [
    "sign",
    "verify"
  ]);
  const signature = await crypto.subtle.sign(algorithm.name, key, encoder.encode(value));
  return btoa(String.fromCharCode(...new Uint8Array(signature)));
};
const _parseCookiePairs = (cookie, name) => {
  const pairs = cookie.split(/;\s*/g);
  const cookiePairs = pairs.map((pairStr) => pairStr.split(/\s*=\s*([^\s]+)/));
  if (!name)
    return cookiePairs;
  return cookiePairs.filter((pair) => pair[0] === name);
};
const parse = (cookie, name) => {
  const parsedCookie = {};
  const unsignedCookies = _parseCookiePairs(cookie, name).filter((pair) => {
    const valueSplit = pair[1].split(".");
    const signature = valueSplit[1] ? (0, import_url.decodeURIComponent_)(valueSplit[1]) : void 0;
    if (valueSplit.length === 2 && signature && signature.length === 44 && signature.endsWith("=")) {
      return false;
    }
    return true;
  });
  for (let [key, value] of unsignedCookies) {
    value = (0, import_url.decodeURIComponent_)(value);
    parsedCookie[key] = value;
  }
  return parsedCookie;
};
const parseSigned = async (cookie, secret, name) => {
  const parsedCookie = {};
  const signedCookies = _parseCookiePairs(cookie, name).filter((pair) => {
    const valueSplit = pair[1].split(".");
    const signature = valueSplit[1] ? (0, import_url.decodeURIComponent_)(valueSplit[1]) : void 0;
    if (valueSplit.length !== 2 || !signature || signature.length !== 44 || !signature.endsWith("=")) {
      console.log("VALUE SPLIT", valueSplit);
      return false;
    }
    return true;
  });
  for (let [key, value] of signedCookies) {
    value = (0, import_url.decodeURIComponent_)(value);
    const signedPair = value.split(".");
    const signatureToCompare = await makeSignature(signedPair[0], secret);
    if (signedPair[1] !== signatureToCompare) {
      parsedCookie[key] = false;
      continue;
    }
    parsedCookie[key] = signedPair[0];
  }
  return parsedCookie;
};
const _serialize = (name, value, opt = {}) => {
  let cookie = `${name}=${value}`;
  if (opt && typeof opt.maxAge === "number" && opt.maxAge >= 0) {
    cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;
  }
  if (opt.domain) {
    cookie += "; Domain=" + opt.domain;
  }
  if (opt.path) {
    cookie += "; Path=" + opt.path;
  }
  if (opt.expires) {
    cookie += "; Expires=" + opt.expires.toUTCString();
  }
  if (opt.httpOnly) {
    cookie += "; HttpOnly";
  }
  if (opt.secure) {
    cookie += "; Secure";
  }
  if (opt.sameSite) {
    cookie += `; SameSite=${opt.sameSite}`;
  }
  return cookie;
};
const serialize = (name, value, opt = {}) => {
  value = encodeURIComponent(value);
  return _serialize(name, value, opt);
};
const serializeSigned = async (name, value, secret, opt = {}) => {
  const signature = await makeSignature(value, secret);
  value = `${value}.${signature}`;
  value = encodeURIComponent(value);
  return _serialize(name, value, opt);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parse,
  parseSigned,
  serialize,
  serializeSigned
});
