// src/utils/cookie.ts
import { decodeURIComponent_ } from "./url.js";
var makeSignature = async (value, secret) => {
  const algorithm = { name: "HMAC", hash: "SHA-256" };
  const encoder = new TextEncoder();
  const key = await crypto.subtle.importKey("raw", encoder.encode(secret), algorithm, false, [
    "sign",
    "verify"
  ]);
  const signature = await crypto.subtle.sign(algorithm.name, key, encoder.encode(value));
  return btoa(String.fromCharCode(...new Uint8Array(signature)));
};
var _parseCookiePairs = (cookie, name) => {
  const pairs = cookie.split(/;\s*/g);
  const cookiePairs = pairs.map((pairStr) => pairStr.split(/\s*=\s*([^\s]+)/));
  if (!name)
    return cookiePairs;
  return cookiePairs.filter((pair) => pair[0] === name);
};
var parse = (cookie, name) => {
  const parsedCookie = {};
  const unsignedCookies = _parseCookiePairs(cookie, name).filter((pair) => {
    const valueSplit = pair[1].split(".");
    const signature = valueSplit[1] ? decodeURIComponent_(valueSplit[1]) : void 0;
    if (valueSplit.length === 2 && signature && signature.length === 44 && signature.endsWith("=")) {
      return false;
    }
    return true;
  });
  for (let [key, value] of unsignedCookies) {
    value = decodeURIComponent_(value);
    parsedCookie[key] = value;
  }
  return parsedCookie;
};
var parseSigned = async (cookie, secret, name) => {
  const parsedCookie = {};
  const signedCookies = _parseCookiePairs(cookie, name).filter((pair) => {
    const valueSplit = pair[1].split(".");
    const signature = valueSplit[1] ? decodeURIComponent_(valueSplit[1]) : void 0;
    if (valueSplit.length !== 2 || !signature || signature.length !== 44 || !signature.endsWith("=")) {
      console.log("VALUE SPLIT", valueSplit);
      return false;
    }
    return true;
  });
  for (let [key, value] of signedCookies) {
    value = decodeURIComponent_(value);
    const signedPair = value.split(".");
    const signatureToCompare = await makeSignature(signedPair[0], secret);
    if (signedPair[1] !== signatureToCompare) {
      parsedCookie[key] = false;
      continue;
    }
    parsedCookie[key] = signedPair[0];
  }
  return parsedCookie;
};
var _serialize = (name, value, opt = {}) => {
  let cookie = `${name}=${value}`;
  if (opt && typeof opt.maxAge === "number" && opt.maxAge >= 0) {
    cookie += `; Max-Age=${Math.floor(opt.maxAge)}`;
  }
  if (opt.domain) {
    cookie += "; Domain=" + opt.domain;
  }
  if (opt.path) {
    cookie += "; Path=" + opt.path;
  }
  if (opt.expires) {
    cookie += "; Expires=" + opt.expires.toUTCString();
  }
  if (opt.httpOnly) {
    cookie += "; HttpOnly";
  }
  if (opt.secure) {
    cookie += "; Secure";
  }
  if (opt.sameSite) {
    cookie += `; SameSite=${opt.sameSite}`;
  }
  return cookie;
};
var serialize = (name, value, opt = {}) => {
  value = encodeURIComponent(value);
  return _serialize(name, value, opt);
};
var serializeSigned = async (name, value, secret, opt = {}) => {
  const signature = await makeSignature(value, secret);
  value = `${value}.${signature}`;
  value = encodeURIComponent(value);
  return _serialize(name, value, opt);
};
export {
  parse,
  parseSigned,
  serialize,
  serializeSigned
};
